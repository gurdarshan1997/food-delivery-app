import random
import string
import json
from json import JSONDecodeError


def registration(member, admin_json, users_json, name, phone, email, add, passwrd):
    '''Register Function || Return True if registered successfully else False'''
    if member.lower() == 'admin':
        f = open(admin_json, 'w+')
        d = {
            "Full Name": name,
            "Phone": phone,
            "Email": email,
            "Address": add,
            "Password": passwrd,
        }
        try:
          with open(admin_json, "r") as fp:
            content = json.load(fp)
        except (FileNotFoundError, JSONDecodeError):
             content = []
        
        if d not in content:
           content.append(d)
        
        with open(admin_json, "w") as fp:
           json.dump(content, fp)

    elif member.lower() == 'user':
        f = open(users_json, 'w+')
        d = {
            "Full Name": name,
            "Phone": phone,
            "Email": email,
            "Address": add,
            "Password": passwrd,
        }
        try:
          with open(users_json, "r") as fp:
            content = json.load(fp)
        except (FileNotFoundError, JSONDecodeError):
             content = []
        
        if d not in content:
           content.append(d)
        
        with open(users_json, "w") as fp:
           json.dump(content, fp)

        f.close()


def login(member, admin_json, users_json, email, password):
    '''Login Functionality || Return True if successfully logged in else False'''
    d = 0
    if member.lower() == 'admin':
        f = open(admin_json, 'r+')
    else:
        f = open(users_json, 'r+')
    try:
        content = json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Email"] == email and content[i]["Password"] == password:
            d = 1
            break
    f.seek(0)
    f.truncate()
    json.dump(content, f)
    f.close()
    if d == 0:
        return False
    return True


def autogenerate_foodId():
    '''Return a autogenerated random Food ID'''
    foodId = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return foodId


def autogenerate_OrderId():
    '''Return a autogenerated random Order ID'''
    
    Order_ID = ''.join(random.choices(string.ascii_uppercase + string.digits, k=3))
    return Order_ID


def addItem(admin, add_item_json_file, foodId, dish, quantity, price, discount, stock):
    fp = open(add_item_json_file, "a+")
    d = {
        "admin": admin,
        "Food ID": foodId,
        "Dish": dish,
        "Quantity": quantity,
        "Price": price,
        "Food discount": discount,
        "Available stock": stock
    }
    try:
        with open(add_item_json_file, "r") as fp:
            content = json.load(fp)
    except (FileNotFoundError, JSONDecodeError):
        content = []
        
    if d not in content:
        content.append(d)
        
    with open(add_item_json_file, "w") as fp:
        json.dump(content, fp)


def viewItem(admin,add_items_json_file):
    fp = open(add_items_json_file, "r+")
    content = json.load(fp)
    for i in content:
        if i["admin"] == admin:
            return content


def viewByFoodID(add_items_json_file, foodId, details):
    fp = open(add_items_json_file, "r+")
    content = json.load(fp)
    for i in content:
        if i["Food ID"] == foodId:
            details.append(i)
            break
    fp.close()


def updateItem(add_items_json_file, foodId, details_to_be_updated, new_value):
    fp = open(add_items_json_file, "r+")
    d = {details_to_be_updated: new_value}
    try:
        content = json.load(fp)
        for i in content:
            if i["Food ID"] == foodId:
                i.update(d)
                fp.seek(0)
                fp.truncate()
                json.dump(content, fp)
                break
    except JSONDecodeError:
        return False
    fp.close()
    return True


def deleteItem(add_items_json_file, foodId):
    fp = open(add_items_json_file, "r+")
    try:
        content = json.load(fp)
        for i in content:
            if i["Food ID"] == foodId:
                del content[content.index(i)]
                fp.seek(0)
                fp.truncate()
                json.dump(content, fp)
                break
    except JSONDecodeError:
        return False
    fp.close()
    return True


def updateProfile(users_json_file, name, details_to_be_updated, new_value):
    fp = open(users_json_file, "r+")
    d = {details_to_be_updated: new_value}
    try:
        content = json.load(fp)
        for i in content:
            if i["Full Name"] == name:
                i.update(d)
                fp.seek(0)
                fp.truncate()
                json.dump(content, fp)
                break
    except JSONDecodeError:
        return False
    fp.close()
    return True


def placeOrder(order_json_file, Price_afterdiscount, price, discount, Order_ID, dish, quantity1, foodId, ordered_by,
               delivery_address):
    fp = open(order_json_file, "a+")
    Price_afterdiscount = float(float(price) - (float(price * discount) / 100))
    d = {
        "Ordered by": Order_ID,
        "Dish": dish,
        "Price": price,
        "Discount": discount,
        "Price_after_discount": Price_afterdiscount,
        "Quantity": quantity1,
        "Order ID": foodId,
        "Total cost": quantity1*Price_afterdiscount,
        "Ordered by": ordered_by,
        "Delivery address": delivery_address
    }
    try:
        with open(order_json_file, "r") as fp:
            content = json.load(fp)
    except (FileNotFoundError, JSONDecodeError):
        content = []
        
    if d not in content:
        content.append(d)
        
    with open(order_json_file, "w") as fp:
        json.dump(content, fp)
    fp.close()
    return True


def orderHistory(order_json_file, Name, details):
    fp = open(order_json_file, "r+")
    try:
        content = json.load(fp)
        for i in content:
            if i["Ordered by"] == Name:
                details.append(i)
    except JSONDecodeError:
        return False
    fp.close()
    return True
